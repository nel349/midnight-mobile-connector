export const wasmGlueCode = "let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_2.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_5.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_5.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_2.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n/**\n * @param {any} coin\n * @returns {any}\n */\nexport function encodeCoinInfo(coin) {\n    const ret = wasm.encodeCoinInfo(coin);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} coin\n * @returns {any}\n */\nexport function encodeQualifiedCoinInfo(coin) {\n    const ret = wasm.encodeQualifiedCoinInfo(coin);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} coin\n * @returns {any}\n */\nexport function decodeCoinInfo(coin) {\n    const ret = wasm.decodeCoinInfo(coin);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} coin\n * @returns {any}\n */\nexport function decodeQualifiedCoinInfo(coin) {\n    const ret = wasm.decodeQualifiedCoinInfo(coin);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {string} tt\n * @returns {Uint8Array}\n */\nexport function encodeTokenType(tt) {\n    const ptr0 = passStringToWasm0(tt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.encodeTokenType(ptr0, len0);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {Uint8Array} tt\n * @returns {string}\n */\nexport function decodeTokenType(tt) {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const ret = wasm.decodeTokenType(tt);\n        var ptr1 = ret[0];\n        var len1 = ret[1];\n        if (ret[3]) {\n            ptr1 = 0; len1 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred2_0 = ptr1;\n        deferred2_1 = len1;\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\n/**\n * @param {string} addr\n * @returns {Uint8Array}\n */\nexport function encodeContractAddress(addr) {\n    const ptr0 = passStringToWasm0(addr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.encodeContractAddress(ptr0, len0);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {Uint8Array} addr\n * @returns {string}\n */\nexport function decodeContractAddress(addr) {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const ret = wasm.decodeContractAddress(addr);\n        var ptr1 = ret[0];\n        var len1 = ret[1];\n        if (ret[3]) {\n            ptr1 = 0; len1 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred2_0 = ptr1;\n        deferred2_1 = len1;\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\n/**\n * @param {string} pk\n * @returns {Uint8Array}\n */\nexport function encodeCoinPublicKey(pk) {\n    const ptr0 = passStringToWasm0(pk, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.encodeCoinPublicKey(ptr0, len0);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {Uint8Array} pk\n * @returns {string}\n */\nexport function decodeCoinPublicKey(pk) {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const ret = wasm.decodeCoinPublicKey(pk);\n        var ptr1 = ret[0];\n        var len1 = ret[1];\n        if (ret[3]) {\n            ptr1 = 0; len1 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred2_0 = ptr1;\n        deferred2_1 = len1;\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\n/**\n * @param {any} entry_point\n * @returns {string}\n */\nexport function entryPointHash(entry_point) {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const ret = wasm.entryPointHash(entry_point);\n        var ptr1 = ret[0];\n        var len1 = ret[1];\n        if (ret[3]) {\n            ptr1 = 0; len1 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred2_0 = ptr1;\n        deferred2_1 = len1;\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\n/**\n * @returns {string}\n */\nexport function communicationCommitmentRandomness() {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const ret = wasm.communicationCommitmentRandomness();\n        var ptr1 = ret[0];\n        var len1 = ret[1];\n        if (ret[3]) {\n            ptr1 = 0; len1 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred2_0 = ptr1;\n        deferred2_1 = len1;\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\n/**\n * @param {any} input\n * @param {any} output\n * @param {string} rand\n * @returns {string}\n */\nexport function communicationCommitment(input, output, rand) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const ptr0 = passStringToWasm0(rand, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.communicationCommitment(input, output, ptr0, len0);\n        var ptr2 = ret[0];\n        var len2 = ret[1];\n        if (ret[3]) {\n            ptr2 = 0; len2 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n}\n\n/**\n * @returns {string}\n */\nexport function sampleSigningKey() {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const ret = wasm.sampleSigningKey();\n        var ptr1 = ret[0];\n        var len1 = ret[1];\n        if (ret[3]) {\n            ptr1 = 0; len1 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred2_0 = ptr1;\n        deferred2_1 = len1;\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\n/**\n * @param {string} key\n * @param {Uint8Array} data\n * @returns {string}\n */\nexport function signData(key, data) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signData(ptr0, len0, data);\n        var ptr2 = ret[0];\n        var len2 = ret[1];\n        if (ret[3]) {\n            ptr2 = 0; len2 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n}\n\n/**\n * @param {string} key\n * @returns {string}\n */\nexport function signatureVerifyingKey(key) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signatureVerifyingKey(ptr0, len0);\n        var ptr2 = ret[0];\n        var len2 = ret[1];\n        if (ret[3]) {\n            ptr2 = 0; len2 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n}\n\n/**\n * @param {string} key\n * @param {Uint8Array} data\n * @param {string} signature\n * @returns {boolean}\n */\nexport function verifySignature(key, data, signature) {\n    const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.verifySignature(ptr0, len0, data, ptr1, len1);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return ret[0] !== 0;\n}\n\n/**\n * @param {Uint8Array} domain_sep\n * @param {string} contract\n * @returns {string}\n */\nexport function tokenType(domain_sep, contract) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const ptr0 = passStringToWasm0(contract, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.tokenType(domain_sep, ptr0, len0);\n        var ptr2 = ret[0];\n        var len2 = ret[1];\n        if (ret[3]) {\n            ptr2 = 0; len2 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n}\n\n/**\n * @returns {string}\n */\nexport function sampleContractAddress() {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const ret = wasm.sampleContractAddress();\n        var ptr1 = ret[0];\n        var len1 = ret[1];\n        if (ret[3]) {\n            ptr1 = 0; len1 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred2_0 = ptr1;\n        deferred2_1 = len1;\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\n/**\n * @returns {string}\n */\nexport function sampleTokenType() {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const ret = wasm.sampleTokenType();\n        var ptr1 = ret[0];\n        var len1 = ret[1];\n        if (ret[3]) {\n            ptr1 = 0; len1 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred2_0 = ptr1;\n        deferred2_1 = len1;\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\n/**\n * @returns {string}\n */\nexport function dummyContractAddress() {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const ret = wasm.dummyContractAddress();\n        var ptr1 = ret[0];\n        var len1 = ret[1];\n        if (ret[3]) {\n            ptr1 = 0; len1 = 0;\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        deferred2_0 = ptr1;\n        deferred2_1 = len1;\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\n/**\n * @param {any} coin\n * @param {any} recipient\n * @returns {any}\n */\nexport function coinCommitment(coin, recipient) {\n    const ret = wasm.coinCommitment(coin, recipient);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} value\n * @returns {any}\n */\nexport function leafHash(value) {\n    const ret = wasm.leafHash(value);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} alignment\n * @returns {bigint}\n */\nexport function maxAlignedSize(alignment) {\n    const ret = wasm.maxAlignedSize(alignment);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return BigInt.asUintN(64, ret[0]);\n}\n\n/**\n * @returns {bigint}\n */\nexport function maxField() {\n    const ret = wasm.maxField();\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {string} zkir\n * @param {any} input\n * @param {any} output\n * @param {any} public_transcript\n * @param {any} private_transcript_outputs\n */\nexport function checkProofData(zkir, input, output, public_transcript, private_transcript_outputs) {\n    const ptr0 = passStringToWasm0(zkir, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.checkProofData(ptr0, len0, input, output, public_transcript, private_transcript_outputs);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\n/**\n * @param {bigint} x\n * @returns {bigint}\n */\nexport function bigIntModFr(x) {\n    const ret = wasm.bigIntModFr(x);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} x\n * @returns {bigint}\n */\nexport function valueToBigInt(x) {\n    const ret = wasm.valueToBigInt(x);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {bigint} x\n * @returns {any}\n */\nexport function bigIntToValue(x) {\n    const ret = wasm.bigIntToValue(x);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} align\n * @param {any} val\n * @returns {any}\n */\nexport function transientHash(align, val) {\n    const ret = wasm.transientHash(align, val);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} align\n * @param {any} val\n * @param {any} opening\n * @returns {any}\n */\nexport function transientCommit(align, val, opening) {\n    const ret = wasm.transientCommit(align, val, opening);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} align\n * @param {any} val\n * @returns {any}\n */\nexport function persistentHash(align, val) {\n    const ret = wasm.persistentHash(align, val);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} align\n * @param {any} val\n * @param {any} opening\n * @returns {any}\n */\nexport function persistentCommit(align, val, opening) {\n    const ret = wasm.persistentCommit(align, val, opening);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} persistent\n * @returns {any}\n */\nexport function degradeToTransient(persistent) {\n    const ret = wasm.degradeToTransient(persistent);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} transient\n * @returns {any}\n */\nexport function upgradeFromTransient(transient) {\n    const ret = wasm.upgradeFromTransient(transient);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} align\n * @param {any} val\n * @returns {any}\n */\nexport function hashToCurve(align, val) {\n    const ret = wasm.hashToCurve(align, val);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} a\n * @param {any} b\n * @returns {any}\n */\nexport function ecAdd(a, b) {\n    const ret = wasm.ecAdd(a, b);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} a\n * @param {any} b\n * @returns {any}\n */\nexport function ecMul(a, b) {\n    const ret = wasm.ecMul(a, b);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} val\n * @returns {any}\n */\nexport function ecMulGenerator(val) {\n    const ret = wasm.ecMulGenerator(val);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_2.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n/**\n * @param {VmStack} initial\n * @param {any} ops\n * @param {CostModel} cost_model\n * @param {bigint | null} [gas_limit]\n * @returns {VmResults}\n */\nexport function runProgram(initial, ops, cost_model, gas_limit) {\n    _assertClass(initial, VmStack);\n    _assertClass(cost_model, CostModel);\n    const ret = wasm.runProgram(initial.__wbg_ptr, ops, cost_model.__wbg_ptr, !isLikeNone(gas_limit), isLikeNone(gas_limit) ? BigInt(0) : gas_limit);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return VmResults.__wrap(ret[0]);\n}\n\nfunction __wbg_adapter_54(arg0, arg1, arg2) {\n    wasm.closure512_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_286(arg0, arg1, arg2, arg3) {\n    wasm.closure553_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * @enum {0 | 1 | 2 | 3}\n */\nexport const NetworkId = Object.freeze({\n    Undeployed: 0, \"0\": \"Undeployed\",\n    DevNet: 1, \"1\": \"DevNet\",\n    TestNet: 2, \"2\": \"TestNet\",\n    MainNet: 3, \"3\": \"MainNet\",\n});\n\nconst __wbindgen_enum_ReadableStreamType = [\"bytes\"];\n\nconst ContractMaintenanceAuthorityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_contractmaintenanceauthority_free(ptr >>> 0, 1));\n\nexport class ContractMaintenanceAuthority {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ContractMaintenanceAuthority.prototype);\n        obj.__wbg_ptr = ptr;\n        ContractMaintenanceAuthorityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ContractMaintenanceAuthorityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_contractmaintenanceauthority_free(ptr, 0);\n    }\n    /**\n     * @param {Array<any>} committee\n     * @param {number} threshold\n     * @param {bigint | null} [counter]\n     */\n    constructor(committee, threshold, counter) {\n        const ret = wasm.contractmaintenanceauthority_new(committee, threshold, isLikeNone(counter) ? 0 : addToExternrefTable0(counter));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ContractMaintenanceAuthorityFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {Array<any>}\n     */\n    get committee() {\n        const ret = wasm.contractmaintenanceauthority_committee(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @returns {number}\n     */\n    get threshold() {\n        const ret = wasm.contractmaintenanceauthority_threshold(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {bigint}\n     */\n    get counter() {\n        const ret = wasm.contractmaintenanceauthority_counter(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {NetworkId} netid\n     * @returns {any}\n     */\n    serialize(netid) {\n        const ret = wasm.contractmaintenanceauthority_serialize(this.__wbg_ptr, netid);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {Uint8Array} raw\n     * @param {NetworkId} netid\n     * @returns {ContractMaintenanceAuthority}\n     */\n    static deserialize(raw, netid) {\n        const ret = wasm.contractmaintenanceauthority_deserialize(raw, netid);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ContractMaintenanceAuthority.__wrap(ret[0]);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.contractmaintenanceauthority_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ContractOperationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_contractoperation_free(ptr >>> 0, 1));\n\nexport class ContractOperation {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ContractOperation.prototype);\n        obj.__wbg_ptr = ptr;\n        ContractOperationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ContractOperationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_contractoperation_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.contractoperation_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ContractOperationFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {any}\n     */\n    get verifierKey() {\n        const ret = wasm.contractoperation_verifier_key(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {Uint8Array} key\n     */\n    set verifierKey(key) {\n        const ret = wasm.contractoperation_set_verifier_key(this.__wbg_ptr, key);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * @param {NetworkId} netid\n     * @returns {any}\n     */\n    serialize(netid) {\n        const ret = wasm.contractoperation_serialize(this.__wbg_ptr, netid);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {Uint8Array} raw\n     * @param {NetworkId} netid\n     * @returns {ContractOperation}\n     */\n    static deserialize(raw, netid) {\n        const ret = wasm.contractoperation_deserialize(raw, netid);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ContractOperation.__wrap(ret[0]);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.contractoperation_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ContractStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_contractstate_free(ptr >>> 0, 1));\n\nexport class ContractState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ContractState.prototype);\n        obj.__wbg_ptr = ptr;\n        ContractStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ContractStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_contractstate_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.contractstate_new();\n        this.__wbg_ptr = ret >>> 0;\n        ContractStateFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {StateValue}\n     */\n    get data() {\n        const ret = wasm.contractstate_data(this.__wbg_ptr);\n        return StateValue.__wrap(ret);\n    }\n    /**\n     * @param {StateValue} data\n     */\n    set data(data) {\n        _assertClass(data, StateValue);\n        wasm.contractstate_set_data(this.__wbg_ptr, data.__wbg_ptr);\n    }\n    /**\n     * @returns {ContractMaintenanceAuthority}\n     */\n    get maintenanceAuthority() {\n        const ret = wasm.contractstate_maintenance_authority(this.__wbg_ptr);\n        return ContractMaintenanceAuthority.__wrap(ret);\n    }\n    /**\n     * @param {ContractMaintenanceAuthority} authority\n     */\n    set maintenanceAuthority(authority) {\n        _assertClass(authority, ContractMaintenanceAuthority);\n        wasm.contractstate_set_maintenance_authority(this.__wbg_ptr, authority.__wbg_ptr);\n    }\n    /**\n     * @returns {any[]}\n     */\n    operations() {\n        const ret = wasm.contractstate_operations(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * @param {any} operation\n     * @returns {ContractOperation | undefined}\n     */\n    operation(operation) {\n        const ret = wasm.contractstate_operation(this.__wbg_ptr, operation);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : ContractOperation.__wrap(ret[0]);\n    }\n    /**\n     * @param {any} operation\n     * @param {ContractOperation} value\n     */\n    setOperation(operation, value) {\n        _assertClass(value, ContractOperation);\n        const ret = wasm.contractstate_setOperation(this.__wbg_ptr, operation, value.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * @param {any} query\n     * @param {CostModel} cost_model\n     * @returns {any}\n     */\n    query(query, cost_model) {\n        _assertClass(cost_model, CostModel);\n        const ret = wasm.contractstate_query(this.__wbg_ptr, query, cost_model.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {NetworkId} netid\n     * @returns {any}\n     */\n    serialize(netid) {\n        const ret = wasm.contractstate_serialize(this.__wbg_ptr, netid);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {Uint8Array} raw\n     * @param {NetworkId} netid\n     * @returns {ContractState}\n     */\n    static deserialize(raw, netid) {\n        const ret = wasm.contractstate_deserialize(raw, netid);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ContractState.__wrap(ret[0]);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.contractstate_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst CostModelFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_costmodel_free(ptr >>> 0, 1));\n\nexport class CostModel {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CostModel.prototype);\n        obj.__wbg_ptr = ptr;\n        CostModelFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CostModelFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmodel_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.costmodel_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        CostModelFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {CostModel}\n     */\n    static dummyCostModel() {\n        const ret = wasm.costmodel_dummyCostModel();\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.costmodel_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IntoUnderlyingByteSourceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_intounderlyingbytesource_free(ptr >>> 0, 1));\n\nexport class IntoUnderlyingByteSource {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IntoUnderlyingByteSourceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_intounderlyingbytesource_free(ptr, 0);\n    }\n    /**\n     * @returns {ReadableStreamType}\n     */\n    get type() {\n        const ret = wasm.intounderlyingbytesource_type(this.__wbg_ptr);\n        return __wbindgen_enum_ReadableStreamType[ret];\n    }\n    /**\n     * @returns {number}\n     */\n    get autoAllocateChunkSize() {\n        const ret = wasm.intounderlyingbytesource_autoAllocateChunkSize(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {ReadableByteStreamController} controller\n     */\n    start(controller) {\n        wasm.intounderlyingbytesource_start(this.__wbg_ptr, controller);\n    }\n    /**\n     * @param {ReadableByteStreamController} controller\n     * @returns {Promise<any>}\n     */\n    pull(controller) {\n        const ret = wasm.intounderlyingbytesource_pull(this.__wbg_ptr, controller);\n        return ret;\n    }\n    cancel() {\n        const ptr = this.__destroy_into_raw();\n        wasm.intounderlyingbytesource_cancel(ptr);\n    }\n}\n\nconst IntoUnderlyingSinkFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_intounderlyingsink_free(ptr >>> 0, 1));\n\nexport class IntoUnderlyingSink {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IntoUnderlyingSinkFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_intounderlyingsink_free(ptr, 0);\n    }\n    /**\n     * @param {any} chunk\n     * @returns {Promise<any>}\n     */\n    write(chunk) {\n        const ret = wasm.intounderlyingsink_write(this.__wbg_ptr, chunk);\n        return ret;\n    }\n    /**\n     * @returns {Promise<any>}\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.intounderlyingsink_close(ptr);\n        return ret;\n    }\n    /**\n     * @param {any} reason\n     * @returns {Promise<any>}\n     */\n    abort(reason) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.intounderlyingsink_abort(ptr, reason);\n        return ret;\n    }\n}\n\nconst IntoUnderlyingSourceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_intounderlyingsource_free(ptr >>> 0, 1));\n\nexport class IntoUnderlyingSource {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IntoUnderlyingSourceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_intounderlyingsource_free(ptr, 0);\n    }\n    /**\n     * @param {ReadableStreamDefaultController} controller\n     * @returns {Promise<any>}\n     */\n    pull(controller) {\n        const ret = wasm.intounderlyingsource_pull(this.__wbg_ptr, controller);\n        return ret;\n    }\n    cancel() {\n        const ptr = this.__destroy_into_raw();\n        wasm.intounderlyingsource_cancel(ptr);\n    }\n}\n\nconst QueryContextFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_querycontext_free(ptr >>> 0, 1));\n\nexport class QueryContext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QueryContext.prototype);\n        obj.__wbg_ptr = ptr;\n        QueryContextFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QueryContextFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_querycontext_free(ptr, 0);\n    }\n    /**\n     * @param {StateValue} state\n     * @param {string} address\n     */\n    constructor(state, address) {\n        _assertClass(state, StateValue);\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.querycontext_new(state.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QueryContextFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {StateValue}\n     */\n    get state() {\n        const ret = wasm.querycontext_state(this.__wbg_ptr);\n        return StateValue.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    get address() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.querycontext_address(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    get effects() {\n        const ret = wasm.querycontext_effects(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {any} effects\n     */\n    set effects(effects) {\n        const ret = wasm.querycontext_set_effects(this.__wbg_ptr, effects);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    get block() {\n        const ret = wasm.querycontext_block(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {any} block\n     */\n    set block(block) {\n        const ret = wasm.querycontext_set_block(this.__wbg_ptr, block);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    get comIndicies() {\n        const ret = wasm.querycontext_com_indicies(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {string} comm\n     * @param {bigint} index\n     * @returns {QueryContext}\n     */\n    insertCommitment(comm, index) {\n        const ptr0 = passStringToWasm0(comm, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.querycontext_insertCommitment(this.__wbg_ptr, ptr0, len0, index);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QueryContext.__wrap(ret[0]);\n    }\n    /**\n     * @param {any} coin\n     * @returns {any}\n     */\n    qualify(coin) {\n        const ret = wasm.querycontext_qualify(this.__wbg_ptr, coin);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {any} transcript\n     * @param {CostModel} cost_model\n     * @returns {QueryContext}\n     */\n    runTranscript(transcript, cost_model) {\n        _assertClass(cost_model, CostModel);\n        const ret = wasm.querycontext_runTranscript(this.__wbg_ptr, transcript, cost_model.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QueryContext.__wrap(ret[0]);\n    }\n    /**\n     * @param {any} ops\n     * @param {CostModel} cost_model\n     * @param {bigint | null} [gas_limit]\n     * @returns {QueryResults}\n     */\n    query(ops, cost_model, gas_limit) {\n        _assertClass(cost_model, CostModel);\n        const ret = wasm.querycontext_query(this.__wbg_ptr, ops, cost_model.__wbg_ptr, !isLikeNone(gas_limit), isLikeNone(gas_limit) ? BigInt(0) : gas_limit);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QueryResults.__wrap(ret[0]);\n    }\n    /**\n     * @param {any} program\n     * @param {CostModel} cost_model\n     * @returns {any}\n     */\n    intoTranscript(program, cost_model) {\n        _assertClass(cost_model, CostModel);\n        const ret = wasm.querycontext_intoTranscript(this.__wbg_ptr, program, cost_model.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.querycontext_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst QueryResultsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_queryresults_free(ptr >>> 0, 1));\n\nexport class QueryResults {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QueryResults.prototype);\n        obj.__wbg_ptr = ptr;\n        QueryResultsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QueryResultsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_queryresults_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.queryresults_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QueryResultsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {QueryContext}\n     */\n    get context() {\n        const ret = wasm.queryresults_context(this.__wbg_ptr);\n        return QueryContext.__wrap(ret);\n    }\n    /**\n     * @returns {any}\n     */\n    get events() {\n        const ret = wasm.queryresults_events(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @returns {bigint}\n     */\n    get gasCost() {\n        const ret = wasm.queryresults_gas_cost(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.queryresults_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst StateBoundedMerkleTreeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_stateboundedmerkletree_free(ptr >>> 0, 1));\n\nexport class StateBoundedMerkleTree {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StateBoundedMerkleTree.prototype);\n        obj.__wbg_ptr = ptr;\n        StateBoundedMerkleTreeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StateBoundedMerkleTreeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stateboundedmerkletree_free(ptr, 0);\n    }\n    /**\n     * @param {number} height\n     */\n    constructor(height) {\n        const ret = wasm.stateboundedmerkletree_blank(height);\n        this.__wbg_ptr = ret >>> 0;\n        StateBoundedMerkleTreeFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    get height() {\n        const ret = wasm.stateboundedmerkletree_height(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {any}\n     */\n    root() {\n        const ret = wasm.stateboundedmerkletree_root(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {any} leaf\n     * @returns {any}\n     */\n    findPathForLeaf(leaf) {\n        const ret = wasm.stateboundedmerkletree_findPathForLeaf(this.__wbg_ptr, leaf);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {bigint} index\n     * @param {any} leaf\n     * @returns {any}\n     */\n    pathForLeaf(index, leaf) {\n        const ret = wasm.stateboundedmerkletree_pathForLeaf(this.__wbg_ptr, index, leaf);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {bigint} index\n     * @param {any} leaf\n     * @returns {StateBoundedMerkleTree}\n     */\n    update(index, leaf) {\n        const ret = wasm.stateboundedmerkletree_update(this.__wbg_ptr, index, leaf);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return StateBoundedMerkleTree.__wrap(ret[0]);\n    }\n    /**\n     * @param {bigint} start\n     * @param {bigint} end\n     * @returns {StateBoundedMerkleTree}\n     */\n    collapse(start, end) {\n        const ret = wasm.stateboundedmerkletree_collapse(this.__wbg_ptr, start, end);\n        return StateBoundedMerkleTree.__wrap(ret);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.stateboundedmerkletree_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst StateMapFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_statemap_free(ptr >>> 0, 1));\n\nexport class StateMap {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StateMap.prototype);\n        obj.__wbg_ptr = ptr;\n        StateMapFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StateMapFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_statemap_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.statemap_new();\n        this.__wbg_ptr = ret >>> 0;\n        StateMapFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {any[]}\n     */\n    keys() {\n        const ret = wasm.statemap_keys(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * @param {any} key\n     * @returns {StateValue | undefined}\n     */\n    get(key) {\n        const ret = wasm.statemap_get(this.__wbg_ptr, key);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : StateValue.__wrap(ret[0]);\n    }\n    /**\n     * @param {any} key\n     * @param {StateValue} value\n     * @returns {StateMap}\n     */\n    insert(key, value) {\n        _assertClass(value, StateValue);\n        const ret = wasm.statemap_insert(this.__wbg_ptr, key, value.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return StateMap.__wrap(ret[0]);\n    }\n    /**\n     * @param {any} key\n     * @returns {StateMap}\n     */\n    remove(key) {\n        const ret = wasm.statemap_remove(this.__wbg_ptr, key);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return StateMap.__wrap(ret[0]);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.statemap_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst StateValueFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_statevalue_free(ptr >>> 0, 1));\n\nexport class StateValue {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StateValue.prototype);\n        obj.__wbg_ptr = ptr;\n        StateValueFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StateValueFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_statevalue_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.statevalue_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        StateValueFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {string}\n     */\n    type() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.statevalue_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {StateValue}\n     */\n    static newNull() {\n        const ret = wasm.statevalue_newNull();\n        return StateValue.__wrap(ret);\n    }\n    /**\n     * @param {any} value\n     * @returns {StateValue}\n     */\n    static newCell(value) {\n        const ret = wasm.statevalue_newCell(value);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return StateValue.__wrap(ret[0]);\n    }\n    /**\n     * @param {StateMap} map\n     * @returns {StateValue}\n     */\n    static newMap(map) {\n        _assertClass(map, StateMap);\n        const ret = wasm.statevalue_newMap(map.__wbg_ptr);\n        return StateValue.__wrap(ret);\n    }\n    /**\n     * @param {StateBoundedMerkleTree} tree\n     * @returns {StateValue}\n     */\n    static newBoundedMerkleTree(tree) {\n        _assertClass(tree, StateBoundedMerkleTree);\n        const ret = wasm.statevalue_newBoundedMerkleTree(tree.__wbg_ptr);\n        return StateValue.__wrap(ret);\n    }\n    /**\n     * @returns {StateValue}\n     */\n    static newArray() {\n        const ret = wasm.statevalue_newArray();\n        return StateValue.__wrap(ret);\n    }\n    /**\n     * @param {StateValue} value\n     * @returns {StateValue}\n     */\n    arrayPush(value) {\n        _assertClass(value, StateValue);\n        const ret = wasm.statevalue_arrayPush(this.__wbg_ptr, value.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return StateValue.__wrap(ret[0]);\n    }\n    /**\n     * @returns {any}\n     */\n    asCell() {\n        const ret = wasm.statevalue_asCell(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @returns {StateMap | undefined}\n     */\n    asMap() {\n        const ret = wasm.statevalue_asMap(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : StateMap.__wrap(ret[0]);\n    }\n    /**\n     * @returns {StateBoundedMerkleTree | undefined}\n     */\n    asBoundedMerkleTree() {\n        const ret = wasm.statevalue_asBoundedMerkleTree(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : StateBoundedMerkleTree.__wrap(ret[0]);\n    }\n    /**\n     * @returns {any[] | undefined}\n     */\n    asArray() {\n        const ret = wasm.statevalue_asArray(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * @returns {number}\n     */\n    logSize() {\n        const ret = wasm.statevalue_logSize(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {any}\n     */\n    encode() {\n        const ret = wasm.statevalue_encode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {any} value\n     * @returns {StateValue}\n     */\n    static decode(value) {\n        const ret = wasm.statevalue_decode(value);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return StateValue.__wrap(ret[0]);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.statevalue_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst VmResultsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vmresults_free(ptr >>> 0, 1));\n\nexport class VmResults {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VmResults.prototype);\n        obj.__wbg_ptr = ptr;\n        VmResultsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VmResultsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vmresults_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.vmresults_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return StateValue.__wrap(ret[0]);\n    }\n    /**\n     * @returns {VmStack}\n     */\n    get stack() {\n        const ret = wasm.vmresults_stack(this.__wbg_ptr);\n        return VmStack.__wrap(ret);\n    }\n    /**\n     * @returns {any}\n     */\n    get events() {\n        const ret = wasm.vmresults_events(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @returns {bigint}\n     */\n    get gasCost() {\n        const ret = wasm.vmresults_gas_cost(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.vmresults_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst VmStackFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vmstack_free(ptr >>> 0, 1));\n\nexport class VmStack {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VmStack.prototype);\n        obj.__wbg_ptr = ptr;\n        VmStackFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VmStackFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vmstack_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.vmstack_new();\n        this.__wbg_ptr = ret >>> 0;\n        VmStackFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {StateValue} value\n     * @param {boolean} is_strong\n     */\n    push(value, is_strong) {\n        _assertClass(value, StateValue);\n        wasm.vmstack_push(this.__wbg_ptr, value.__wbg_ptr, is_strong);\n    }\n    removeLast() {\n        wasm.vmstack_removeLast(this.__wbg_ptr);\n    }\n    /**\n     * @returns {number}\n     */\n    length() {\n        const ret = wasm.vmstack_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} idx\n     * @returns {StateValue | undefined}\n     */\n    get(idx) {\n        const ret = wasm.vmstack_get(this.__wbg_ptr, idx);\n        return ret === 0 ? undefined : StateValue.__wrap(ret);\n    }\n    /**\n     * @param {number} idx\n     * @returns {boolean | undefined}\n     */\n    isStrong(idx) {\n        const ret = wasm.vmstack_isStrong(this.__wbg_ptr, idx);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n     * @param {boolean | null} [compact]\n     * @returns {string}\n     */\n    toString(compact) {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.vmstack_toString(this.__wbg_ptr, isLikeNone(compact) ? 0xFFFFFF : compact ? 1 : 0);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nexport function __wbg_BigInt_470dd987b8190f8e(arg0) {\n    const ret = BigInt(arg0);\n    return ret;\n};\n\nexport function __wbg_BigInt_ddea6d2f55558acb() { return handleError(function (arg0) {\n    const ret = BigInt(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_String_fed4d24b68977888(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_buffer_09165b52af8c5237(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_byobRequest_77d9adf63337edfb(arg0) {\n    const ret = arg0.byobRequest;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_byteLength_e674b853d9c77e1d(arg0) {\n    const ret = arg0.byteLength;\n    return ret;\n};\n\nexport function __wbg_byteOffset_fd862df290ef848d(arg0) {\n    const ret = arg0.byteOffset;\n    return ret;\n};\n\nexport function __wbg_call_672a4d21634d4a24() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_304cc1fef3466669() { return handleError(function (arg0) {\n    arg0.close();\n}, arguments) };\n\nexport function __wbg_close_5ce03e29be453811() { return handleError(function (arg0) {\n    arg0.close();\n}, arguments) };\n\nexport function __wbg_contractstate_new(arg0) {\n    const ret = ContractState.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_574e78ad8b13b65f(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_done_769e5ede4b31c67b(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_enqueue_bb16ba72f537dc9e() { return handleError(function (arg0, arg1) {\n    arg0.enqueue(arg1);\n}, arguments) };\n\nexport function __wbg_entries_3265d4158b33e5dc(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_getRandomValues_b8f5dbd5f3995a9e() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_get_67b2ba62fc30de12() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_b9b93047fe3cf45b(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_bb8f74a92cb2e784(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_instanceof_ArrayBuffer_e14585432e3737fc(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_17156bcf118086a9(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isArray_a1eab7e0d067391b(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_343e2beeeece1bb0(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_iterator_9a24c88df860dc65() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_e2d2a49132c1b256(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_msCrypto_a61aeb35a24c1329(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_new_23a2665fac83c611(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_286(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_405e22f390576ce2() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_5e0be73521bc8c17() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_new_78feb108b6472713() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_new_c68d7209be747379(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newnoargs_105ed471475aaf50(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_a381634e90c276d4(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_next_25feadfc0913fea9(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_next_6574e1a8a62d1055() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_node_905d3e251edff8a2(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_process_dc0fbacc7c1c06f7(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_737cfc8c1432c2c6(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_97d92b4fcc8a61c5(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_d3219def82552485(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ac0988aba3254290() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_require_60cc747a6bc5215a() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_4851785c9c5f573d(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_respond_1f279fa9f8edcb1c() { return handleError(function (arg0, arg1) {\n    arg0.respond(arg1 >>> 0);\n}, arguments) };\n\nexport function __wbg_set_37837023f3d740e8(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_3fda3bac07393de4(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_8fc6bf8a5b1071d1(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_statevalue_new(arg0) {\n    const ret = StateValue.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_static_accessor_GLOBAL_88a902d13a557d07() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_37c5d418e4bf5819() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_5de37043a91a9c40() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_subarray_aa9065fa9dc5df96(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_then_44b73946d2fb3e7d(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_toString_b5d4438bc26b267c() { return handleError(function (arg0, arg1) {\n    const ret = arg0.toString(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_toString_c813bbd34d063839(arg0) {\n    const ret = arg0.toString();\n    return ret;\n};\n\nexport function __wbg_value_cd1ffa7b1ab794f1(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_versions_c01dfd4722a88165(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_view_fd8a56e8983f448d(arg0) {\n    const ret = arg0.view;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u128(arg0, arg1) {\n    const ret = BigInt.asUintN(64, arg0) << BigInt(64) | BigInt.asUintN(64, arg1);\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2600(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 513, __wbg_adapter_54);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_2;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_shr(arg0, arg1) {\n    const ret = arg0 >> arg1;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n";